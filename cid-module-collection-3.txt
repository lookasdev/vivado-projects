

module fsm
(
    input logic [7:0]char,
    input logic clock,
    output logic pass
);

localparam STATE_E0 = 3'b000;
localparam STATE_A = 3'b001;
localparam STATE_B0 = 3'b010;
localparam STATE_B1 = 3'b011;
localparam STATE_B2 = 3'b100;
localparam STATE_C = 3'b101;
localparam STATE_E1 = 3'b110;
localparam STATE_FAIL = 3'b111;

logic [2:0]state;
logic [4:0]cnt;
logic en, up, reset;

ud_counter COUNTER(clock, reset, up, en, cnt);

always_ff @(posedge clock) begin
    state <= STATE_E0;
    case (state)
        STATE_E0: begin
            if (char == "e") state <= STATE_E0;
            else if (char == "a") state <= STATE_A;
            else state <= STATE_FAIL;
        end
        STATE_A: begin
            if (char == "a") state <= STATE_A;
            else if (char == "b") state <= STATE_B0;
            else state <= STATE_FAIL;
        end
        STATE_B0:
            if (char == "b") state <= STATE_B1;
            else state <= STATE_FAIL;
         STATE_B1:
            if (char == "b") state <= STATE_B2;
            else state <= STATE_FAIL;
         STATE_B2:
            if (char == "c") state <= STATE_C;
            else state <= STATE_FAIL;
         STATE_C: begin
            if (char == "c") state <= STATE_C;
            else if (char == "e" && cnt == 1) state <= STATE_E1;
            else state <= STATE_FAIL;
        end
        STATE_E1: begin
            if (cnt > 1) state <= STATE_FAIL;
            else
                if (char == "e") state <= STATE_E1;
                else state <= STATE_FAIL;
        end
        STATE_FAIL: state <= STATE_FAIL;
    endcase
end

always_comb begin
    case (state)
        STATE_A: begin
            reset = 0;
            en = 1;
            up = 1;
        end
        STATE_B0: en = 0;
        STATE_B1: en = 0;
        STATE_B2: en = 0;
        STATE_C: begin
            en = 1;
            up = 0;
        end
        STATE_E1: begin
            en = 0;
            pass = 1;
        end
        default: begin
            pass = 0;
            up = 0;
            en = 0;
            reset = 1;
        end
    endcase
end
endmodule




module ud_counter
(
    input logic clock, reset, up, en,
    output logic [4:0]cnt
);

always_ff @(posedge clock) begin
    if (reset) cnt <= 0;
    else if (en)
        if (up) cnt <= cnt + 1;
        else cnt <= cnt - 1;
    else cnt <= cnt;
end
endmodule

module comparator_system (
    input  logic clk,
    input  logic reset,
    input  logic a,
    input  logic b,
    output logic stop
);

    logic [7:0] same_counter;
    logic [7:0] diff_counter;
    logic [7:0] diff;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            same_counter <= 0;
            diff_counter <= 0;
            stop <= 0;
        end else if (!stop) begin
            if (a == b)
                same_counter <= same_counter + 1;
            else
                diff_counter <= diff_counter + 1;

            // Calcul diferență absolută
            if (same_counter >= diff_counter)
                diff <= same_counter - diff_counter;
            else
                diff <= diff_counter - same_counter;

            // Setăm stop dacă diferența > 31
            if (diff > 8'd31)
                stop <= 1;
        end
    end

endmodule


module freq_div(
    input logic clk,
    input logic rst,
    output logic clk_out
    );

    logic [4:0] cnt;

always @(posedge clk, negedge rst)
begin
    if(!rst) begin
        clk_out <= 0;
        cnt <= 0;
        end
    else begin
        if(cnt == 29) begin
            cnt <= 0;
            clk_out <= ~clk_out;
            end
        else
            cnt <= cnt + 1;

    end
end

endmodule