// https://wiki.dcae.pub.ro/index.php/Boolean_Board_-_Pinout

module latch(
    input logic D, CK,
    output logic Q
    );
        
    assign Q = (D & CK) | ((~CK) & Q);
endmodule

module flipflop_masterslave(
    input logic D, CK,
    output logic QFF
    );
    
    logic wLatch_0;
    
    latch latch_0(
        .D(D),
        .CK(CK), // .CK(~CK), -> activare pe front crescator
        .Q(wLatch_0)
    );
    latch latch_1(
        .D(wLatch_0),
        .CK(~CK), // .CK(CK), -> activare pe front crescator
        .Q(QFF)
    );

endmodule

module ram(
    input  logic ck,
    input  logic we,
    input  logic [6:0] adr,
    input  logic [7:0] dataIn,
    output logic [7:0] dataOut
);

    logic [7:0] ram [0:127];

    // scriere sincronă
    always_ff @(posedge ck) begin
        if (we)
            ram[adr] <= dataIn;
    end

    // citire sincronă
    // always_ff @(posedge ck) begin
    //     if (!we)  // doar când nu scriem (opțional)
            // dataOut <= ram[adr];
    // end
	
	// citire asincrona
    assign dataOut = ram[adr];

endmodule

module testBenchRam(

    );
    logic Sck, Swe;
    logic [6:0] Sadr;
    logic [7:0] SdataIn;
    logic [7:0] SdataOut;
    
    ram dut(
        .ck(Sck),
        .we(Swe),
        .adr(Sadr),
        .dataIn(SdataIn),
        .dataOut(SdataOut)
        );
        
        
     initial begin
        Sck = 0;
        forever begin
           #10 Sck = ~Sck; 
        end
     end
     
     initial begin
        Swe = 0;
        Sadr = 0;
        SdataIn = 0;
        
        @(negedge Sck);
        # 5 Swe = 1; Sadr = 3; SdataIn = 13;
        # 10 Swe = 0;
        
        @(negedge Sck);
        # 5 Swe = 1; Sadr = 4; SdataIn = 14;
        # 10 Swe = 0;

        @(negedge Sck);
        # 5 Swe = 1; Sadr = 5; SdataIn = 15;
        # 10 Swe = 0;

        @(negedge Sck);
        @(negedge Sck);
        @(negedge Sck);
        # 5 Sadr = 4;
        # 10
        
        @(negedge Sck);
        # 5 Sadr = 5;
        # 10
        
        @(negedge Sck);
        # 5 Sadr = 3;
        # 10
        
        # 20 $stop;
        end
endmodule

module num32bits(
input logic ck,
input logic reset,
output logic [6:0] out
    );
    
    logic [31:0] outNum; // ca sa nu mai apara la pini
    
    
    always_ff@(posedge ck) begin
     if(reset) begin
      outNum <= 0;
     end
     else begin
      outNum <= outNum + 1;
     end
    end
      
    // afisor 7 segmente
    
    always_comb begin
    case(outNum[29:26])
      4'd0: out = 7'b1000000;
      4'd1: out = 7'b1111001;
      4'd2: out = 7'b0100100;
      4'd3: out = 7'b0110000;
      4'd4: out = 7'b0011001;
      4'd5: out = 7'b0010010;
      4'd6: out = 7'b0000010;
      4'd7: out = 7'b1111000;
      default: out = 7'b0000110;
    endcase 
  end
      
      // assign f25 = out[25]; // aprox 1.5hz = 100mhz / 2^26
	  // assign f24 = out[24]; // aprox 3hz = 100mhz / 2^25
      
endmodule

module numEN4b(
input logic ck,
input logic reset,
input logic en,
output logic [3:0] out
    );
    
    always_ff@(posedge ck) 
     if(reset)  out <= 4'b0000;
     else if(en) out <= out + 1;
          else out <= out;
           
endmodule

module mux4(
    input logic [15:0]in,
    input logic [1:0] sel,
    output logic [3:0] out
    );
    
    always_comb
    case(sel)
    2'b00: out = in[3:0];
    2'b01: out = in[7:4];
    2'b10: out = in[11:8];
    2'b11: out = in[15:12];
    
    endcase
endmodule

module dmux4(
    input logic [1:0] in,
    
    output logic [3:0] out
    );
    
    always_comb
    case(in)
        2'b00: out = 4'b0001;
        2'b01: out = 4'b0010;
        2'b10: out = 4'b0100;
        2'b11: out = 4'b1000;
    endcase
endmodule

module pwm(
    input logic ck, reset,
    output logic led1, led2, led3 
    );
    
    logic [7:0] numOut;
    
    always@(posedge ck) // always_ff
        if(reset) numOut <= 0;
        else if (numOut < 100) numOut <= numOut + 1;
        else numOut <= 0;
    
    always_comb
    begin
    
    if(numOut < 10) led1 <= 1;
    else led1 <= 0;
    if(numOut < 50) led2 <= 1;
    else led2 <= 0;
    if(numOut < 90) led3 <= 1;
    else led3 <= 0;
    
    end
    
    
endmodule

module automatUnu(
    input logic ck,
    input logic in,
    input logic reset,
    output logic detectOk,
    output logic detectFail
);

localparam STATE_READ1 = 2'b00;
localparam STATE_READ0 = 2'b01;
localparam STATE_FAIL = 2'b10;

logic [1:0] state;

always_ff @(posedge ck)
    if (reset) state <= 0; // state <= STATE_READ1;
    else case (state)
            STATE_READ1: if (in == 1) state <= STATE_READ1;
                         else state <= STATE_READ0;
            STATE_READ0: if (in == 1) state <= STATE_FAIL;
                         else state <= STATE_READ0;
            STATE_FAIL: state <= STATE_FAIL;
            default: state <= STATE_READ1;
         endcase
         
always_comb
    case(state)
        STATE_READ1: begin detectOk = 1; detectFail = 0; end

        STATE_READ0: begin detectOk = 1; detectFail = 0; end

        STATE_FAIL: begin detectOk = 0; detectFail = 1; end

        default: begin detectOk = 1; detectFail = 0; end
    endcase

endmodule

module automatCioco(
    input logic ck,
    input logic [1:0] in,
    input logic reset,
    output logic ciocolata
);

localparam STATE_NIMIC = 3'b000;
localparam STATE_50B = 3'b001;
localparam STATE_10LEU = 3'b010;
localparam STATE_15LEI = 3'b011;
localparam STATE_20LEI = 3'b100;

logic [2:0] state;

always_ff @(posedge ck)
    if (reset) state <= STATE_NIMIC;
    else case (state)
            STATE_NIMIC: if (in == 2'b00) state <= STATE_NIMIC;
                         else if(in == 2'b01) state <= STATE_50B;
                         else if(in == 2'b10) state <= STATE_10LEU;
            STATE_50B: if (in == 2'b00) state <= STATE_50B;
                       else if(in == 2'b01) state <= STATE_10LEU;
                       else if(in == 2'b10) state <= STATE_15LEI;
            STATE_10LEU: if (in == 2'b00) state <= STATE_10LEU;
                         else if(in == 2'b01) state <= STATE_15LEI;
                         else if(in == 2'b10) state <= STATE_20LEI;
            STATE_15LEI: if (in == 2'b00) state <= STATE_NIMIC;
                         else if(in == 2'b01) state <= STATE_50B;
                         else if(in == 2'b10) state <= STATE_10LEU;
            STATE_20LEI: if (in == 2'b00) state <= STATE_50B;
                         else if(in == 2'b01) state <= STATE_10LEU;
                         else if(in == 2'b10) state <= STATE_15LEI;
            
            default: state <= STATE_NIMIC; // ce se intampla in celelalte cazuri - inafara domeniului nostru
         endcase
         

always_comb
    case(state)
        STATE_NIMIC: ciocolata = 0;
        STATE_50B: ciocolata = 0;
        STATE_10LEU: ciocolata = 0;
        STATE_15LEI: ciocolata = 1;
        STATE_20LEI: ciocolata = 1;

        default: ciocolata = 0;
    endcase

endmodule

module testBenchCioco();

logic  Sck;
logic  Sreset;
logic  [1:0] Sin;
logic Sciocolata;

automat2 dut(
    .ck(Sck),
    .reset(Sreset),
    .in(Sin),
    .ciocolata(Sciocolata)
);

initial begin
    Sck = 0;
    forever #1 Sck = ~Sck;
end

initial begin
    Sin <= 2'b00;
    Sreset <= 1;
        
    #2  Sreset <= 0;
    
    #2	Sin <= 2'b10;
    #2	Sin <= 2'b10;
    #2	Sin <= 2'b00;
    #2	Sin <= 2'b10;
    #2	Sin <= 2'b00;
    
    #10 $stop();
end
   
endmodule

module freq_div_corect (
    input  logic clk,
    input  logic reset,
    output logic out
);

    // Pentru 0.25s HIGH + 0.25s LOW = 0.5s perioada completa
    parameter LIMIT_PERIOD = 25_000_000; // => pt 2hz fix
	parameter LIMIT_PERIOD = 50_000_000; // => pt 1hz fix (cred)

    logic [24:0] counter;  // suficient pentru 25 milioane
    logic toggle;

    // Contor pân? la limit?
    always_ff @(posedge clk or posedge reset) begin
        if (reset)
            counter <= 0;
        else if (counter == LIMIT_PERIOD - 1)
            counter <= 0;
        else
            counter <= counter + 1;
    end

    // Flip-flop: semnalul de iesire se inverseaza la atingerea limitei
    always_ff @(posedge clk or posedge reset) begin
        if (reset)
            toggle <= 0;
        else if (counter == LIMIT_PERIOD - 1)
            toggle <= ~toggle;
    end

    assign out = toggle;

endmodule

module automatLift(
    input logic ck,
    input logic [2:0] etaj_curent, etaj_cerut,
    input logic reset,
    input logic [1:0] door_cnt_val,
    output logic door_cnt_en,
    output logic sus,
    output logic jos
);

localparam STATE_IDLE = 5'b00001;
localparam STATE_DOOR_CLOSE = 5'b00010;
localparam STATE_DOOR_OPEN = 5'b00100;
localparam STATE_MOVE_UP = 5'b01000;
localparam STATE_MOVE_DOWN = 5'b10000;

logic [4:0] state;

always_ff @(posedge ck)
    if (reset) state <= STATE_IDLE;
    else case (state)
            STATE_IDLE: if (etaj_curent != etaj_cerut) state <= STATE_DOOR_CLOSE;
                        else state <= STATE_IDLE;
                         
            STATE_DOOR_CLOSE: if (door_cnt_val == 3 && (etaj_curent < etaj_cerut)) state <= STATE_MOVE_DOWN;
                       else if(door_cnt_val == 3 && (etaj_curent > etaj_cerut)) state <= STATE_MOVE_UP;
                       else state <= STATE_DOOR_CLOSE;
            STATE_MOVE_UP: if (etaj_curent == etaj_cerut) state <= STATE_DOOR_OPEN;
                         else state <= STATE_MOVE_UP;
            STATE_MOVE_DOWN: if (etaj_curent == etaj_cerut) state <= STATE_DOOR_OPEN;
                         else state <= STATE_MOVE_DOWN;
            STATE_DOOR_OPEN: if(door_cnt_val == 3) state <= STATE_IDLE;
                             else state <= STATE_DOOR_OPEN;
            
            default: state <= STATE_IDLE; // ce se intampla in celelalte cazuri - inafara domeniului nostru
         endcase

always_comb
    case(state)
        STATE_IDLE: begin door_cnt_en = 0; sus = 0; jos = 0; end
        STATE_DOOR_CLOSE: begin door_cnt_en = 1; sus = 0; jos = 0; end
        STATE_DOOR_OPEN: begin door_cnt_en = 1; sus = 0; jos = 0; end
        STATE_MOVE_UP: if(etaj_curent != etaj_cerut) begin door_cnt_en = 0; sus = 1; jos = 0; end
        STATE_MOVE_DOWN: if(etaj_curent != etaj_cerut) begin door_cnt_en = 0; sus = 0; jos = 1; end

        default: begin door_cnt_en = 0; sus = 0; jos = 0; end
    endcase

endmodule